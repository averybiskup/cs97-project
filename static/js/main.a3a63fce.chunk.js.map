{"version":3,"sources":["CourseCard.js","CourseRenderer.js","getCourses.js","App.js","CoursePage.js","Router.js","reportWebVitals.js","index.js"],"names":["CourseCard","props","path_to_course","course_id","className","name","to","CourseRenderer","useState","query","setQuery","filteredCourses","courses","search","JsSearch","addIndex","addDocuments","result","filter","course","includes","filterCourses","type","id","placeholder","onChange","e","target","value","map","title","getCourses","App","CoursePage","location","useLocation","URLparam","pathname","split","length","forEach","MainRouter","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Router","document","getElementById"],"mappings":"iNAceA,EAXE,SAACC,GACd,IAAMC,EAAiB,wBAA0BD,EAAME,UACvD,OACI,sBAAKC,UAAU,cAAf,UACQ,8BAAMH,EAAMI,OACZ,+CACA,cAAC,IAAD,CAAMC,GAAIJ,EAAV,6B,QCkCDK,EAhBQ,SAACN,GAAW,IAAD,EACJO,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAGxBC,EA1BY,SAACC,EAASH,GAG5B,IAAKA,EACD,OAAOG,EAGX,IAAIC,EAAS,IAAIC,IAAgB,MACjCD,EAAOE,SAAS,SAChBF,EAAOE,SAAS,QAChBF,EAAOE,SAAS,UAEhBF,EAAOG,aAAaJ,GACpB,IAAMK,EAASJ,EAAOA,OAAOJ,GAG7B,OAAOG,EAAQM,QAAO,SAACC,GACnB,OAAOF,EAAOG,SAASD,MASHE,CADRpB,EAAMW,QACyBH,GAE/C,OACI,gCACI,uBAAOa,KAAK,OAAOC,GAAG,gBAAgBC,YAAY,SAASnB,KAAK,IAAIoB,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOC,UAEpGjB,EAAgBkB,KAAI,SAAAV,GAAM,OACtB,cAAC,EAAD,CAA4Bd,KAAMc,EAAOW,MAAO3B,UAAWgB,EAAOI,IAAjDJ,EAAOI,WCd1BQ,EAtBE,WAoBb,MAlBgB,CACZ,CACA,GAAM,EACN,MAAS,eACT,OAAU,MACV,KAAQ,CAAC,QAAS,iBACf,CACH,GAAM,EACN,MAAS,SACT,OAAU,OACV,KAAQ,CAAC,WACN,CACH,GAAM,EACN,MAAS,UACT,OAAU,UACV,KAAQ,CAAC,OAAQ,UAAW,iBCJrBC,EAVH,WACV,OACE,qBAAK5B,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,CAAgBQ,QAASmB,W,OCmBlBE,EAvBE,WAEb,IAAMC,EAAWC,cACXC,EAAWF,EAASG,SAASC,MAAM,KAAKJ,EAASG,SAASC,MAAM,KAAKC,OAAS,GAGhFpC,EAAY,GAOhB,OANA4B,IAAaS,SAAQ,SAACrB,GACdA,EAAOI,IAAMa,IACbjC,EAAYgB,EAAOW,UAKvB,sBAAK1B,UAAU,cAAf,UACQ,cAAC,IAAD,CAAMA,UAAU,cAAcE,GAAG,iBAAjC,kBACA,mDACqBH,SCGtBsC,EAdE,WAEb,OACI,qBAAKrC,UAAU,SAAf,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,iBAAiBC,UAAYZ,IAC/C,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,2BAA2BC,UAAYX,YCL9DY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K","file":"static/js/main.a3a63fce.chunk.js","sourcesContent":["import { useLocation, Link } from \"react-router-dom\";\nimport './App.css'\n\nlet CourseCard = (props) => {\n    const path_to_course = \"/cs97-project/course/\" + props.course_id\n    return (\n        <div className=\"course-card\">\n                <div>{props.name}</div>\n                <div>COURSE IMAGE</div>\n                <Link to={path_to_course} >Course Page</Link>\n        </div>\n    );\n}\n\nexport default CourseCard;\n","import {useState} from 'react';\nimport CourseCard from './CourseCard.js'\nimport * as JsSearch from 'js-search'\n\nconst filterCourses = (courses, query) => {\n\n    // Makes sure query isn't empty\n    if (!query)\n        return courses\n\n    // Creating search \n    var search = new JsSearch.Search('id')\n    search.addIndex('title')\n    search.addIndex('tags')\n    search.addIndex('author')\n\n    search.addDocuments(courses)\n    const result = search.search(query)\n\n    // Returning courses that match the search\n    return courses.filter((course) => {\n        return result.includes(course); \n    })\n};\n\n\n\nconst CourseRenderer = (props) => {\n    const [query, setQuery] = useState('');\n    const courses = props.courses\n    const filteredCourses = filterCourses(courses, query)\n\n    return (\n        <div>\n            <input type=\"text\" id=\"course-search\" placeholder=\"search\" name=\"s\" onChange={e => setQuery(e.target.value)}/>\n            \n            {filteredCourses.map(course => (\n                 <CourseCard key={course.id} name={course.title} course_id={course.id} />\n            ))}\n\n        </div>\n    )\n}\nexport default CourseRenderer\n","// Function for getting courses, later this will fetch from server\nlet getCourses = () => {\n\n    const courses = [\n        { \n        'id': 0,\n        'title': 'React Native',\n        'author': 'Joe',\n        'tags': ['React', 'React Native']\n        }, {\n        'id': 1,\n        'title': 'Python',\n        'author': 'Spud',\n        'tags': ['Python']\n        }, {\n        'id': 2,\n        'title': 'Node.js',\n        'author': 'Natalie',\n        'tags': ['Node', 'Node.js', 'Javascript']\n        }\n    ]\n    return courses\n}\nexport default getCourses;\n","import './App.css';\nimport CourseRenderer from './CourseRenderer'\nimport getCourses from './getCourses.js'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CourseRenderer courses={getCourses()} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { useLocation, Link } from \"react-router-dom\";\nimport './App.css'\nimport getCourses from './getCourses.js'\n\nlet CoursePage = () => {\n    // This gets whaetever is being the last / in the current url\n    const location = useLocation()\n    const URLparam = location.pathname.split('/')[location.pathname.split('/').length - 1]\n\n    // Getting the course related to the url\n    let course_id = ''\n    getCourses().forEach((course) => {\n        if (course.id == URLparam) {\n            course_id = course.title\n        }\n    })\n\n    return (\n        <div className=\"course-page\">\n                <Link className=\"home-button\" to='/cs97-project/'>Home</Link>\n                <div>\n                    This is course: {course_id}\n                </div>\n        </div>\n    );\n}\n\nexport default CoursePage;\n","import React from 'react';\nimport App from './App.js';\nimport CoursePage from './CoursePage.js';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from 'react-router-dom';\n\nlet MainRouter = () => {\n\n    return (\n        <div className=\"Router\">\n            <Router>\n                <Switch>\n                    <Route exact path='/cs97-project/' component={ App } />\n                    <Route exact path='/cs97-project/course/:id' component={ CoursePage } />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default MainRouter;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Router from './Router.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}