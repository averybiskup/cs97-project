{"version":3,"sources":["components/CourseCard.js","helper/signout.js","components/CourseRenderer.js","helper/fetchCourses.js","helper/updateCourse.js","helper/fetchReviews.js","components/App.js","helper/postReview.js","components/ReviewCard.js","components/CreateReview.js","components/RenderReviews.js","helper/saveCourse.js","helper/checkSavedCourse.js","components/CoursePage.js","components/AddCourse.js","helper/loginPost.js","components/Login.js","helper/checkUser.js","helper/addUser.js","components/Signup.js","helper/getUserInfo.js","components/UserReviewCard.js","components/UserRenderReviews.js","helper/unsaveCourse.js","components/RenderSavedCourses.js","components/Profile.js","components/Router.js","helper/reportWebVitals.js","index.js"],"names":["CourseCard","props","num_reviews","path_to_course","course_id","Object","keys","length","className","to","name","author","rating","Number","starRatedColor","numberOfStars","starDimension","starSpacing","signout","window","localStorage","getItem","clear","location","replace","CourseRenderer","loginButton","useState","query","setQuery","coursesObj","courses","filteredCourses","search","JsSearch","addIndex","addDocuments","result","filter","course","includes","filterCourses","map","id","isLoggedIn","loginRoute","onClick","type","placeholder","onChange","e","target","value","title","course_rating","reviews","fetchCourses","a","axios","get","then","res","console","log","setItem","JSON","stringify","data","catch","err","updateCourse","new_rating","info","json","post","headers","alert","fetchReviews","parse","removeItem","count","key","toFixed","App","isLoading","setLoading","setCourses","useEffect","grabCourses","t","body","postReview","user_id","course_name","review","status","response","ReviewCard","charAt","date","CreateReview","setTitle","setBody","setRating","onSubmit","setMessage","preventDefault","handleSubmit","updateMessage","starHoverColor","isSelectable","changeRating","RenderReviews","loc","reviewsList","message","saveCourse","user_name","save","checkSavedCourse","p","CoursePage","createReview","saveCourseButton","useLocation","url_param","pathname","split","current_course","saved","setSaved","courseMsg","setCourseMsg","scrollTo","checkSaved","href","url","AddCourse","loginPost","username","password","browserHistory","goBack","Login","setUsername","setPassword","showPassword","setShowPassword","useHistory","sha256","checkUser","addUser","analyzePassword","test","Signup","color","toString","document","getElementById","style","backgroundColor","borderColor","check","getUserInfo","UserReviewCard","course_description","UserRenderReviews","unsaveCourse","send","RenderSavedCourses","entries","arr","myProfile","display","Profile","signoutButton","userInfo","setUserInfo","setIsLoading","getInfo","joined","saved_courses","MainRouter","exact","path","component","ignoreScrollPosition","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Router"],"mappings":"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","file":"static/js/main.5422c876.chunk.js","sourcesContent":["// Cards that show up on main page.\n// Should contain:\n// Name of Course\n// Author of Course (maybe)\n// Course Image\n// Link to the course page\n\n\nimport { useLocation, Link } from 'react-router-dom'\nimport '../style/CourseCard.css'\nimport StarRatings from 'react-star-ratings'\n\n\n\nlet CourseCard = (props) => {\n    \n    //Create a path for each course so we can direct the user to the correct course page later\n    const path_to_course = '/cs97-project/course/' + props.course_id\n\n    //Sets the number of reviews for each course\n    let num_reviews\n    if (props.num_reviews) {\n        num_reviews = Object.keys(props.num_reviews).length\n    } else {\n        num_reviews = 0\n    }\n\n    return (\n        //Inside each course card, display:\n        <div className='course-card'>\n            {/*The title, which is a clickable link which takes you to the course chosen*/}\n            <Link className='course-title' to={path_to_course}>{props.name}</Link>\n\n            {/*The course author*/}\n            <div className='course-author'>{props.author}</div>\n\n            {/*And the course rating, given through a 5 star interface, as well as the number of ratings for the course*/}\n            <div className='course-rating'>\n\n                {/*Star Rating*/}\n                <StarRatings\n                rating={Number(props.rating)}\n                starRatedColor='#3B83EE'\n                numberOfStars={5}\n                name='rating'\n                starDimension='20px'\n                starSpacing='1px'\n                />\n                \n                {/*Number Rating*/}\n                <div className='num-reviews'>({num_reviews})</div>\n            </div>\n        </div>\n    )\n}\n\nexport default CourseCard\n","// Function that clears localStorage, hence signing the user out\n\nconst signout = () => {\n    if (window.localStorage.getItem('isAuthenticated')) {\n        window.localStorage.clear()\n        window.location.replace('/cs97-project')\n    }\n}\n\nexport default signout\n","// Component for rendering the cards on the main page.\n// Also contains the code for the search bar\n// Uses js-search which is for searching for matches in a list of objects\n\nimport {useState} from 'react'\nimport CourseCard from './CourseCard.js'\nimport * as JsSearch from 'js-search'\nimport { Link } from 'react-router-dom'\nimport signout from '../helper/signout.js'\nimport viewProfile from '../helper/viewProfile.js'\nimport '../style/CourseRenderer.css'\n\n// Returns all objects in the courses list that match the query\n//                     array  , string\nconst filterCourses = (courses, query) => {\n\n    // Makes sure query isn't empty\n    if (!query)\n        return courses\n\n    // Creating search\n    var search = new JsSearch.Search('id')\n    search.addIndex('title')\n    search.addIndex('tags')\n    search.addDocuments(courses)\n    const result = search.search(query)\n\n    // Returning courses that match the search\n    return courses.filter((course) => {\n        return result.includes(course) \n    })\n}\n\n// This is the component that renders the courses on the home page\nconst CourseRenderer = (props) => {\n    const [query, setQuery] = useState('')\n    const coursesObj = props.courses\n    const courses = Object.keys(coursesObj).map((id) => {\n       return coursesObj[id]\n    })\n\n    //If user searched for certain courses only, then store the filtered courses\n    const filteredCourses = filterCourses(courses, query)\n\n    //For the loginButton, check to see if the user is logged in or not\n    let loginButton\n    let isLoggedIn = false\n    const loginRoute = '/cs97-project/profile/' + window.localStorage.getItem('user_id')\n    \n    //If user is logged in (isAuthenticated), display Sign Out button\n    if (window.localStorage.getItem('isAuthenticated')) { \n        loginButton = <Link className='a' onClick={() => signout()}>Sign Out</Link>\n        isLoggedIn = true\n        \n    //Otherwise diplay Login button\n    } else {\n        loginButton = <Link className='a' to='/cs97-project/login'>Login</Link>\n        isLoggedIn = false\n    }\n\n\n    return (\n        <div>\n            {/*For the top bar, display the loginButton (which we assigned as Login or Sign Out above), the Course Title\n               and the Profile button IF the user is logged in*/}\n            <div className='top-bar'>\n                <div className='user'>{window.localStorage.getItem('username')}</div>\n                {loginButton}\n                <Link to='/cs97-project' className='title'>CourseMe</Link>\n                {isLoggedIn && <Link to={loginRoute}>Profile</Link>}\n            </div>\n\n            {/*For the middle of the page we have a Search Bar, which users can use to search for courses*/}\n            <div className='middle-page'>\n                <br></br>\n                <input type='text'  className='middle-input' id='course-search' placeholder='Search for Course...' name='s' onChange={e => setQuery(e.target.value)}/>\n            </div>\n            \n            {/*The rest of the page is dedicated to the CourseCards, which displays the course title, author, and rating*/}\n            <div id='wrapper'>\n                {filteredCourses.map(course => (\n                     <CourseCard key={course.id} name={course.title} author={course.author} rating={course.course_rating} course_id={course.id} num_reviews={course.reviews} />\n                     \n                ))}\n            </div>\n\n\n        </div>\n    )\n}\nexport default CourseRenderer\n","// Fetching data from the server\n// NOTE: fetches entire database, be careful with this, and use\n// fetchReviews when you can to fetch a single course\n\nimport axios from 'axios'\nimport getCourses from './getCourses.js'\n\nconst fetchCourses = async () => {\n\n    // We can use /api/test because we have a proxy in package.json which\n    // points to the server address (localhost:8000)\n    const data = await axios.get('https://courseme97.herokuapp.com/api/getcourses')\n        .then(res => {\n            console.log('Got data')\n            window.localStorage.setItem('courses', JSON.stringify(res.data))\n            return res.data\n        })\n        .catch(err => {\n            console.log('Server error')\n            return false\n            \n        })\n    return data\n\n}\n\nexport default fetchCourses\n","// Function for updating a course's rating\n// Currently this is only called when a new review is added\n//\n// This does not update the localStorage so may take time to\n// be updated.\n\n\nimport axios from 'axios'\n\nconst updateCourse = async (course_id, new_rating) => {\n\n    // We can use /api/updatecourse because we have a proxy in package.json which\n    // points to the server address (localhost:8000)\n    const info = {\n        'course_id': course_id,\n        'new_rating': new_rating\n    }\n\n    const json = JSON.stringify(info)\n\n    console.log('Updating course')\n    const data = await axios.post('https://courseme97.herokuapp.com/api/updatecourse', json, { headers: { 'Content-Type': 'application/json' }})\n        .then(res => {\n            console.log('Course updated')\n            return res.data\n        })\n        .catch(err => {\n            console.log(err)\n            window.alert('Error updating rating') \n        })\n    return data\n\n}\n\nexport default updateCourse\n","// Function for fetching a singular course\n// used when a new review is added in order to update the render\n// with the newly added review.\n// This also takes less power than grabbing all the courses,\n// so using this when you can is more efficient\n//\n// This also updates the localStorage\n\nimport axios from 'axios'\nimport updateCourse from './updateCourse.js'\n\nconst fetchReviews = async (course_id) => {\n\n    // We can use /api/fetchreviews because we have a proxy in package.json which\n    // points to the server address (localhost:8000)\n    const data = await axios.get('https://courseme97.herokuapp.com/api/fetchreviews/' + course_id)\n        .then(res => {\n            const courses = JSON.parse(window.localStorage.getItem('courses'))\n            courses[course_id] = res.data\n            const reviews = res.data.reviews\n            console.log('Updating reviews')\n            window.localStorage.removeItem('courses')\n            window.localStorage.setItem('courses', JSON.stringify(courses))\n            \n            let new_rating = 0\n            let count = 0\n            Object.keys(reviews).map((key) => {\n               new_rating += Number(reviews[key].rating)\n               count++\n            })\n            \n            // divide by number of reviews represented by count\n            new_rating = new_rating/count\n            new_rating = new_rating.toFixed(2)\n            updateCourse(course_id, new_rating) \n\n            return res.data\n        })\n        .catch(err => {\n            console.log(err)\n            window.alert('Error fetching reviews') \n        })\n    return data\n\n}\n\nexport default fetchReviews\n","// Component for the home page of the app\n\nimport '../style/App.css'\nimport CourseRenderer from './CourseRenderer'\nimport fetchCourses from '../helper/fetchCourses.js'\nimport fetchReviews from '../helper/fetchReviews.js'\nimport { useState, useEffect } from 'react'\n\nconst App = () => {\n    const [isLoading, setLoading] = useState(true)\n    const [courses, setCourses] = useState({})\n\n    // Getting data from fetchCourse function\n    useEffect(() => {\n\n        // Getting course data asynchronously from fetchCourses\n        const grabCourses = async () => {\n            const data = await fetchCourses()\n            setCourses(data)\n            console.log(data)\n        }\n        grabCourses()\n            .then((t) => {\n                console.log('testing', t)\n                setLoading(false)\n            })\n\n    }, [])\n\n    // Render a loading div to show before data has arrived \n    if (isLoading) {\n        return <div body></div>\n    }\n\n    // Returning the CourseRenderer to render the courses on the page\n    return (\n        <div className='App'>\n          <header className='App-header'>\n            <CourseRenderer courses={courses} />\n          </header>\n        </div>\n    )\n}\n\nexport default App\n","// Function for posting a review to the db\n\n// Does not update localStorage because it's updated after\n// a call to this function, as they are both called upon\n// a new review being added\n\n\nimport axios from 'axios'\n\nconst postReview = async (course_id, body, author, title, rating, user_id, course_name) => {\n\n    // Creating the review based on function arguments\n    const review = {\n        'course_id': course_id,\n        'body': body,\n        'author': author,\n        'title': title,\n        'rating': rating,\n        'user_id': user_id,\n        'course_name': course_name\n    }\n\n    // Turning review into a string to post iit\n    const json = JSON.stringify(review)\n\n    console.log('Posting review')\n    const p = await axios.post('https://courseme97.herokuapp.com/api/postreview', json, { headers: { 'Content-Type': 'application/json' }}) \n        .then((res) => {\n            console.log(res.status)\n        })\n        .catch(err => {\n            console.log(err.response.data)\n            window.alert('Post failed. Server is probably down. ' + err)\n        })\n}\n\nexport default postReview\n","// Component for each review\n\nimport '../style/ReviewCard.css';\nimport StarRatings from 'react-star-ratings';\nimport { Link } from 'react-router-dom'\n\nlet ReviewCard = (props) => {\n\n    // get first letter of string of Author\n    let firstLet = props.review.author.charAt(0);\n    return (\n        <div className='review'>\n            <div className='right'>\n                <Link className='review-author' to={'/cs97-project/profile/' + props.review.user_id}>{props.review.author}</Link>\n                <div className='review-title'>{props.review.title}</div>\n                <div className='star-container'>\n                    <StarRatings\n                    rating={Number(props.review.rating)}\n                    starRatedColor='#3B83EE'\n                    numberOfStars={5}\n                    name='rating'\n                    starDimension='16px'\n                    starSpacing='1px'\n                    />\n\n\n                    </div>\n                <div className='review-body'>{props.review.body}</div>\n                {/*\n                    add data for props.review.likes and place where number is\n                    Then add a function to increase likes\n                */}\n                <div className='review-date'>{props.review.date}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default ReviewCard;\n","// Component for the input section of the reviews page\n\nimport '../style/App.css'\nimport { useState } from 'react'\nimport postReview from '../helper/postReview.js'\nimport fetchCourses from '../helper/fetchCourses.js'\nimport fetchReviews from '../helper/fetchReviews.js'\nimport ReviewCard from './ReviewCard.js'\nimport StarRatings2 from 'react-star-ratings'\n\n// Function for handling the submit button on the form\n// Returns true if form was valid\nconst handleSubmit = (e, course_id, title, body, rating, setMessage, course_name) => {\n    e.preventDefault()\n\n    // Checking for valid form data\n    if (title.length <= 0) { \n        alert('No title')\n    } else if (body.length <= 0) {\n        alert('No body')\n    } else if (rating == 0) {\n        alert('Rating can not be 0')\n    } else {\n\n        const author = window.localStorage.getItem('username')\n        const user_id = Number(window.localStorage.getItem('user_id'))\n\n        // change (!author) to (false) for review testing\n        if (!author) {\n            alert('You are not signed in')\n\n            window.location.replace('/cs97-project/login')\n        } else {\n\n            // Posting review\n            postReview(course_id, body, author, title, rating, user_id, course_name)\n\n            // Rerendering parent component\n            setMessage('Preparing review...')\n\n            // Fetching courses and updating localStorage\n            // Then rerendering via setMessage\n            fetchReviews(course_id)\n                .then(() => {\n                    setMessage('Review added!')\n                })\n\n            return true\n        }\n    }\n    return false\n}\n\n\n\nconst CreateReview = (props) => {\n\n    // State variables that are changed when form gets input\n    const [title, setTitle] = useState('')\n    const [body, setBody] = useState('')\n    const [rating, setRating] = useState(0)\n    const course_id = props.course.id\n    const course_name = props.course.title\n\n    return (\n        <div className='create-review-input'>\n            \n            {/*Create an empty review form*/}\n            <form id='create-review-form'\n                onSubmit={(e) => {\n                    if (handleSubmit(e, course_id, title, body, rating, props.updateMessage, course_name)) {\n                        // Resetting form inputs\n                        setTitle('')\n                        setBody('')\n                        setRating(0)\n                    }\n                }}\n            >\n\n            {/*The user must fill out 3 inputs: */}\n            <div className='review-inputs'>\n                <div className='star-title'>\n                    {/*The title of their review*/}\n                    <input\n                        type='text'\n                        name='title'\n                        placeholder='title (required)'\n                        value={title}\n                        onChange={(e) => setTitle(e.target.value)}\n                        className='title-input'\n                    />\n\n                    {/*And the star rating*/}\n                    <div className='create-star-rating'>\n                    <StarRatings2\n                        rating={rating}\n                        starRatedColor='#3B83EE'\n                        starHoverColor='#3B83EE'\n                        isSelectable={true}\n                        numberOfStars={5}\n                        name='rating'\n                        starDimension='32px'\n                        starSpacing='5px'\n                        changeRating={(rating)=>setRating(rating)}\n                    />\n                    </div>\n\n                    {/*A submit button to submit their review*/}\n                    <input type='submit' value='Submit' className={'submit-review'} />\n                </div>\n\n                {/*The review itself*/}\n                <textarea\n                    type='text'\n                    name='body'\n                    placeholder='review (required)'\n                    value={body} onChange={(e) => setBody(e.target.value)}\n                    className={'body-input'}\n                />\n\n                \n\n                <br/>\n            </div>\n\n            </form>\n        </div>\n    )\n}\n\nexport default CreateReview\n","// Component to render each review\n\nimport ReviewCard from './ReviewCard.js'\n\nlet RenderReviews = (props) => {\n\n    // Getting courses object from localStorage\n    const courses = JSON.parse(window.localStorage.getItem('courses'))\n    const reviews = courses[props.loc]['reviews']\n\n    // Making sure that a course has at least 1 review, otherwise\n    // displays this message\n    if (!reviews) {\n        return (\n            <div>\n                Course has no reviews.\n            </div>\n        )\n    }\n\n    // Turning object with reviews, into list of reviews\n    const reviewsList = Object.keys(reviews).map((id) => {\n       return reviews[id]\n    })\n    \n    return (\n        <div className='reviews'>\n            <div className='status-message'>{props.message}</div>\n            {reviewsList.map((review) => {\n                return <ReviewCard key={review.id} review={review} />\n            })}\n        </div>\n    )\n}\n\nexport default RenderReviews\n","\nimport axios from 'axios'\n\nconst saveCourse = async (user_name, course_id, course_name) => {\n\n    // Creating the review based on function arguments\n    const save = {\n        'course_id': course_id,\n        'user_name': user_name,\n        'course_name': course_name\n    }\n\n    // Turning review into a string to post iit\n    const json = JSON.stringify(save)\n\n    const p = await axios.post('https://courseme97.herokuapp.com/savecourse', json, { headers: { 'Content-Type': 'application/json' }}) \n        .then((res) => {\n            console.log(res.status)\n        })\n        .catch(err => {\n            console.log(err.response.data)\n            window.alert('Post failed. Server is probably down. ' + err)\n        })\n}\n\nexport default saveCourse\n","// Function for getting which courses the user has saved\n\nimport axios from 'axios'\n\nconst checkSavedCourse = async (user_name, course_id) => {\n\n    // Creating the review based on function arguments\n    const save = {\n        'course_id': course_id,\n        'user_name': user_name,\n    }\n\n    // Turning review into a string to post it\n    const json = JSON.stringify(save)\n\n    // Posting to server\n    const p = await axios.post('https://courseme97.herokuapp.com/checksavedcourse', json, { headers: { 'Content-Type': 'application/json' }}) \n        .then((res) => {\n            return res.data\n        })\n        .catch(err => {\n            console.log(err.response.data)\n            window.alert('Post failed. Server is probably down. ' + err)\n        })\n\n    return p\n}\n\nexport default checkSavedCourse\n","// Component for each course\n// This is where users can leave reviews, and save courses  \n\nimport { useLocation, Link } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport '../style/App.css'\nimport getCourses from '../helper/getCourses.js'\nimport postReview from '../helper/postReview.js'\nimport ReviewCard from './ReviewCard.js'\nimport CreateReview from './CreateReview.js'\nimport fetchCourses from '../helper/fetchCourses.js'\nimport RenderReviews from './RenderReviews'\nimport StarRatings from 'react-star-ratings'\nimport saveCourse from '../helper/saveCourse.js'\nimport checkSavedCourse from '../helper/checkSavedCourse.js'\n\nlet CoursePage = (props) => {\n\n    const location = useLocation()\n    const url_param = location.pathname.split('/')[location.pathname.split('/').length - 1]\n    const courses = JSON.parse(window.localStorage.getItem('courses'))\n    const current_course = courses[url_param]\n\n    // This allows us to rerender dom from child component\n    const [message, setMessage] = useState('')\n    const [saved, setSaved] = useState(false)\n    const [courseMsg, setCourseMsg] = useState('Save Course')\n    \n    // Scrolls to top of page\n    useEffect(() => {\n        window.scrollTo(0, 0)\n        \n        const checkSaved = async () => {\n            const data = await checkSavedCourse(window.localStorage.getItem('username'), current_course['id'])\n            setSaved(data)\n        }\n        \n        if (window.localStorage.getItem('username')) {\n            checkSaved()\n        }\n\n    }, [])\n\n    // Checking that the localStorage has courses\n    if (window.localStorage.getItem('courses') === null) {\n        return (<div>Something went wrong</div>)\n    } \n\n    // Getting courses from local storage\n    let createReview\n    let saveCourseButton\n\n    const username = window.localStorage.getItem('username')\n\n    // Making sure the user is logged in\n    // If they aren't, we don't allow them to create a review, so we don't\n    // render that part of the page\n    if (username) {\n\n        createReview = <CreateReview course={current_course} updateMessage={setMessage} />\n\n        // Checking if the user has already saved the course, and displaying\n        // that they have\n        if (!saved) {\n            saveCourseButton = <button className='save-course' onClick={() => {\n                saveCourse(window.localStorage.getItem('username'), current_course['id'], current_course['title'])\n                setCourseMsg('Course Saved!')\n            }}>{courseMsg}</button>\n        \n        } else {\n            saveCourseButton = <div className='save-course'>Course Saved</div>\n        }\n    } else {\n        createReview = \n        <div>\n            <Link className='course-page-login' to='/cs97-project/login'>Login to leave a review</Link>\n        </div>\n        saveCourseButton = <div className='save-course'></div>\n    }\n\n\n    return (\n        <div className='course-page'>\n            {/*Link to Home page*/}\n            <Link className='course-page-home-button home-button' to='/cs97-project/'>Home</Link>\n            {saveCourseButton}\n\n            {/*Display the Title and Author of the course*/}\n            <div className='create-review'>\n                <div className = 'create-review-title'> <b>{current_course['title']}</b></div>\n                <div className = 'create-review-author'>Author: {current_course['author']}</div>\n                <div className='course-page-stars'>\n                    <StarRatings\n                        rating={Number(current_course['course_rating'])}\n                        starRatedColor='#3B83EE'\n                        numberOfStars={5}\n                        name='rating'\n                        starDimension='20px'\n                        starSpacing='1px'\n                    />\n                </div>\n                <div className='course-link-container'><a className='course-link-review-page' href={current_course.url} target='_blank'>View Course</a></div>\n\n                {/*If the user is logged in, this will display a section for the user to create a review and rate the course\n                   If the user is not logged in, this will display the message 'Login to leave a review'*/}\n                {createReview}\n            </div>\n            \n            {/*The rest of the page is dedicated to showing the reviews of the course*/}\n            <div className='review-cards'>\n                <RenderReviews loc={url_param} message={message} />\n            </div>\n        </div>\n    );\n}\n\nexport default CoursePage;\n","// Button that appears on CoursePage that adds a static course to the db\n\nimport '../style/App.css'\nimport axios from 'axios'\n\nlet add = () => {\n    axios.get('/api/addcourse')\n}\n\n// This was an internal function that we used to add a course\n// Users won't use this, but eventually we want to allow them to add their own\n// courses\nconst AddCourse = () => {\n    return (\n        <div>\n            <button onClick={() => add()}>add course</button>\n        </div>\n    )\n}\n\nexport default AddCourse\n","// Function for logging a user in\n\nimport axios from 'axios'\n\nconst loginPost = async (username, password, browserHistory) => {\n\n    // Passing hash and username\n    const data = {\n        'username': username,\n        'hash': password\n    }\n\n    const json = JSON.stringify(data)\n\n    // Posting to server\n    const p = await axios.post('https://courseme97.herokuapp.com/login', json, { headers: { 'Content-Type': 'application/json' }}) \n        .then((res) => {\n            console.log(res.status)\n            if (res.status == 200) {\n                \n                // Setting local storage to user's info\n                window.localStorage.setItem('isAuthenticated', true)\n                window.localStorage.setItem('username', res.data.username)\n                window.localStorage.setItem('user_id', res.data.id)\n                browserHistory.goBack()\n            }\n        })\n        .catch(err => {\n            console.log(err)\n            window.alert('Incorrect username or password.')\n        })\n}\n\nexport default loginPost\n","// Component for the login page\n\nimport '../style/App.css'\nimport '../style/login.css'\nimport { useState, useEffect } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport sha256 from 'js-sha256'\nimport loginPost from '../helper/loginPost.js'\nimport signout from '../helper/signout.js'\n\nconst handleSubmit = (e, username, password, browserHistory) => {\n    e.preventDefault()\n\n    //Check that the username and password are longer than 0. \n    //If valid username and password, attempt to login the user\n    if (username.length <= 0) {\n        alert('No username')\n    } else if (password.length <= 0) {\n        alert('No password')\n    } else {\n        loginPost(username, sha256(password), browserHistory)\n    }\n}\n\nconst Login = () => {\n    \n    // Storing user input in the state\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [showPassword, setShowPassword] = useState(false)\n\n    let browserHistory = useHistory()\n\n    // Scrolls to top of page\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [])\n\n    // If the user is logged in, we shouldn't show a login page\n    if (window.localStorage.getItem('isAuthenticated')) {\n        return (\n            <div>\n                <div>You are already signed in.</div>\n                <Link className='home-button' to='/cs97-project/'>Home</Link>\n                <button className='sign-out' onClick={() => signout()}>Sign out</button>\n            </div>\n        )\n    }\n            \n\n    return (\n        //For the login page,\n        <div className='login-page'>\n            {/*Display a Home page link*/}\n            <Link className='home-button home-button-signup' to='/cs97-project/'>Home</Link>\n\n            <form id='login' onSubmit={(e) => {\n                handleSubmit(e, username, password, browserHistory)\n                setPassword('')\n            }}>\n                {/*Have the user input their username and password*/}\n                <div className='login-inputs'>\n                    <input className='username' type='text' name='username' placeholder='username' value={username} onChange={(e) => setUsername(e.target.value)}/>\n                    <input id='password' className='password' type='password' name='password' placeholder='password' value={password} onChange={(e) => setPassword(e.target.value) }/>\n\n                    {/*Small button that allows user to view their password or hide their password while typing it out*/}\n                    <button className='password-button' type='button' onClick={() => {\n                    setShowPassword(!showPassword)}}>{showPassword ? 'hide password' : 'show password' }</button>\n                </div>\n\n                \n                <div className='login-button-wrapper'>\n                    {/*Display a Welcome back message, a login button, and a sign up button*/}\n                    <div className='hello'>Welcome back, <span className='hello-name'>{username}</span></div>\n                    <input className='login-button' type='submit' value='login' />\n                    <div className='login-extra-buttons'>\n                        <Link className='signup' to='/cs97-project/signup'>or sign up</Link>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Login\n","// Function for checking if a user alraedy exists in the system\n// We use this when the user tries to create an account so we make\n// sure not to have duplicate users\n\nimport axios from 'axios'\n\nconst checkUser = async (username) => {\n\n    const data = {\n        'username': username\n    }\n\n    const json = JSON.stringify(data)\n\n    // Getting data from server\n    const p = await axios.get('https://courseme97.herokuapp.com/checkuser/' + username) \n        .then((res) => {\n            return res\n        })\n        .catch(err => {\n            console.log(err.response.data)\n            window.alert('Post failed. Server is probably down. ' + err)\n        })\n    return p\n}\n\nexport default checkUser\n","// Function for adding a new user\n\nimport axios from 'axios'\n\nconst addUser = async (username, password) => {\n\n    // Data to post to server\n    const data = {\n        'username': username,\n        'hash': password\n    }\n\n    // Putting data into a string to post\n    const json = JSON.stringify(data)\n\n    // Posting to the server\n    const p = await axios.post('https://courseme97.herokuapp.com/signup', json, { headers: { 'Content-Type': 'application/json' }}) \n        .then(res => {\n            console.log(res.status)\n            window.location.replace('/cs97-project/login')\n        })\n\n        .catch(err => {\n            console.log(err.response.data)\n            window.alert('Post failed. Server is probably down. ' + err)\n        })\n}\n\nexport default addUser\n","// Component for Signup page\n\nimport '../style/App.css'\nimport '../style/login.css'\nimport { useState, useEffect } from 'react'\nimport sha256 from 'js-sha256'\nimport checkUser from '../helper/checkUser.js'\nimport addUser from '../helper/addUser.js'\nimport { Link } from 'react-router-dom'\nimport signout from '../helper/signout.js'\n\nconst handleSubmit = (e, username, password) => {\n    e.preventDefault()\n\n    if (username.length <= 0) {\n        alert('No username')\n    } else if (password.length <= 0) {\n        alert('No password')\n    } else {\n\n        const check = async (username) => {\n            const data = await checkUser(username)\n\n            if (!data.data) {\n                addUser(username, sha256(password))\n            } else {\n                alert('User already exists')\n            }\n        }\n        check(username)\n    }\n}\n\n// Code for analyizing password strength in realtime\nconst analyzePassword = (password) => {\n\n    if (password.length < 6) {\n        return 0\n    }\n\n    let count = 8\n\n    const alph = /[a-z]/\n    const num = /[0-9]/\n    if (alph.test(password)) {\n        count -= 4\n    }\n\n    if (num.test(password)) {\n        count -= 4\n    }\n\n    if (password.length > 8) {\n        count += (password.length - count)\n    }\n\n    return count\n}\n\nconst Signup = () => {\n    \n\n    // Scrolls to top of page\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [])  \n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [showPassword, setShowPassword] = useState(false)\n\n    let test = (analyzePassword(password)).toString() + (analyzePassword(password)).toString()\n    let color = '#11' + test + '11'\n\n    if (password.length > 0 && password.length < 10) {\n        document.getElementById('signup-page').style.backgroundColor = color\n        document.getElementById('password').style.borderColor = color\n    }\n\n    if (window.localStorage.getItem('isAuthenticated')) {\n        return (\n            window.location = '/cs97-project/'\n        )\n    }\n\n    return (\n        <div className='signup-page' id='signup-page'>\n            <Link className='home-button home-button-signup' to='/cs97-project/'>Home</Link>\n            <form id='signup' onSubmit={(e) => {\n                handleSubmit(e, username, password)\n                setPassword('')\n            }}>\n            <div className='login-inputs'>\n                <input id='username' className='username' type='text' name='username' placeholder='new username' value={username} onChange={(e) => setUsername(e.target.value)}/>\n                <input id='password' className='password' type={showPassword ? 'text' : 'password'} name='password' placeholder='new password' value={password} onChange={(e) => setPassword(e.target.value) } />\n                <button className='password-button' type='button' onClick={() => {\n                    setShowPassword(!showPassword)}}>{showPassword ? 'hide password' : 'show password' }</button>\n            </div>\n            <div id='lower-bg' className='login-button-wrapper'>\n                <div className='hello'>Welcome, <span className='hello-name'>{username}</span></div>\n                <input className='login-button' type='submit' value='sign up' />\n                <div className='login-extra-buttons'>\n                    <Link className='login' to='/cs97-project/login'>or login</Link>\n                </div>\n            </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Signup\n\n\n\n","// Function for getting a user's information\n\nimport axios from 'axios'\n\nconst getUserInfo = async (user_id) => {\n    const data = await axios.get('https://courseme97.herokuapp.com/getuserinfo/' + user_id)\n        .then(res => {\n            if (res.status == 200) {\n                return res.data\n            }\n        })\n        .catch(err => {\n            console.log(err)\n        })\n\n    return data\n\n}\n\nexport default getUserInfo\n","// This is the review card that is displayed on the users profile page\n// It doesn't need to show the same data as the other review card\n// so we had to make another one\n\nimport '../style/ReviewCard.css'\nimport StarRatings from 'react-star-ratings'\nimport { Link } from 'react-router-dom'\n\nlet UserReviewCard = (props) => {\n    return (\n        <div className='review'>\n            <div className='review-author'></div>\n            <div className='right'>\n                <Link to={'/cs97-project/course/' + props.review.course_id} className='review-course-link'>{props.review.course_name}</Link>\n                <div className='review-title'>{props.review.title}</div>\n                <div className='review-course_descrition'>{props.review.course_description}</div>\n                <div className='star-container'>\n                    <StarRatings\n                    rating={Number(props.review.rating)}\n                    starRatedColor='orange'\n                    numberOfStars={5}\n                    name='rating'\n                    starDimension='16px'\n                    starSpacing='1px'\n                    />\n                </div>\n                <div className='review-body'>{props.review.body}</div>\n                <div className='review-date'>{props.review.date}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default UserReviewCard\n","// Component for rendering reviews of the user on their profile page\n\nimport UserReviewCard from './UserReviewCard.js'\nimport getUserInfo from '../helper/getUserInfo.js'\nimport { useState, useEffect } from 'react'\n\nlet UserRenderReviews = (props) => {\n\n    const reviews = props.reviews\n\n    // Making sure that a course has at least 1 review, otherwise\n    // displays this message\n    if (!reviews) {\n        return (\n            <div className='profile-no-reviews'>\n                User has no reviews.\n            </div>\n        )\n    }\n\n    // Turning object with reviews, into list of reviews\n    const reviewsList = Object.keys(reviews).map((id) => {\n       return reviews[id]\n    })\n    \n    return (\n        <div className='reviews'>\n            {reviewsList.map((review) => {\n                return <UserReviewCard key={review.id} review={review}/>\n            })}\n        </div>\n    )\n}\n\n\nexport default UserRenderReviews\n","// Function for unsaving a course, this is called when a user presses\n// the little delete button next to a saved course on their profile\n\nimport axios from 'axios'\n\nconst unsaveCourse = async (username, course_id) => {\n\n    const send = {\n        'user_name': username,\n        'course_id': course_id\n    }\n    \n    const json = JSON.stringify(send)\n\n    const p = await axios.post('https://courseme97.herokuapp.com/unsavecourse', json, { headers: { 'Content-Type': 'application/json' }}) \n        .then(res => {\n            console.log(res)\n        })\n        .catch(err => {\n            console.log('Server error')\n        })\n}\n\nexport default unsaveCourse\n","import { Link } from 'react-router-dom'\nimport unsaveCourse from '../helper/unsaveCourse.js'\nimport { useState } from 'react'\nimport '../style/Profile.css'\n\nconst RenderSavedCourses = (props) => {\n\n    {/*If no courses saved*/}\n    if (!props.courses) {\n        return (\n            <div>No saved courses</div>\n        )\n    }\n\n    return (\n        <div className='saved-course-list'>\n        {/*Display saved courses if user has saved courses*/}\n            Saved Courses:\n            {Object.entries(props.courses).map((arr) => {\n                if (arr[1] != null) {\n                    if (props.myProfile) {\n                        return (\n                        <div key={arr[0]} id='profile-course'>\n                            <button type='button' className='remove-button' onClick={() => {\n                                unsaveCourse(window.localStorage.getItem('username'), arr[0])\n                                    .then(() => {\n                                        document.getElementById('profile-course').style.display = 'none';\n                                    })\n                            }}>x</button>\n\n                            <Link className='single-saved-course' to={'/cs97-project/course/' + arr[0]}>{arr[1]}</Link>\n                        </div>\n                        )\n                    } else {\n                        return (\n                            <div key={arr[0]} id='profile-course'>\n                                <Link className='single-saved-course' to={'/cs97-project/course/' + arr[0]}>{arr[1]}</Link>\n                            </div>\n                        )\n                    }\n                }\n                \n            })} \n        </div>\n    )\n}\n\nexport default RenderSavedCourses\n","// Component for the profile page\n\nimport { Link, useLocation } from 'react-router-dom'\nimport signout from '../helper/signout.js'\nimport loginPost from '../helper/loginPost.js'\nimport getUserInfo from '../helper/getUserInfo.js'\nimport UserRenderReviews from './UserRenderReviews.js'\nimport UserReviewCard from './UserReviewCard.js'\nimport { useState, useEffect } from 'react'\nimport RenderSavedCourses from './RenderSavedCourses.js'\nimport '../style/Profile.css'\n\n\nconst loggedInUser = localStorage.getItem('username')\n\nconst Profile = () => {\n\n    // Storing user data in state\n    const [userInfo, setUserInfo] = useState({})\n    const [isLoading, setIsLoading] = useState(true)\n\n    // Getting the current user id\n    const location = useLocation()\n    const url_param = location.pathname.split('/')[location.pathname.split('/').length - 1]\n\n    // Getting the user data\n    useEffect(() => {\n        const getInfo = async () => {\n            const data = await getUserInfo(url_param)\n            setUserInfo(data) \n            setIsLoading(false)\n        }\n\n        getInfo()\n    }, [])\n\n    // Make sure the reviews are loaded from database before trying to display them\n    if (isLoading) {\n        return (\n            <div className='profile-loading'>Loading Reviews</div>\n        )\n    }\n\n    // Making sure the user is signed in and matches the profile to display the signout button\n    let signoutButton\n    let myProfile = false\n\n    // If the profile is of the current logged in user, display the signout button\n    if (window.localStorage.getItem('username') == userInfo.username) {\n        signoutButton = <button className='profile-logout' type='button' onClick={() => signout()}>Sign out</button>\n        myProfile = true\n    } else {\n        signoutButton = <div></div>\n    }\n\n    return (\n        <div>\n            <Link className='home-button-profile home-button' to='/cs97-project/'>Home</Link>\n            <div>\n                {/*Display the signout button, the username, date joined, saved courses, as well as the reviews the user has left*/}\n                {signoutButton}\n                <div className='profile-top'>\n                    <div className='profile-name'>{userInfo.username}</div>\n                    <div className='profile-date'>Joined: {userInfo.joined}</div>\n                </div>\n                <div className='saved-courses'>\n                    <RenderSavedCourses courses={userInfo.saved_courses} myProfile={myProfile}/>\n                </div>\n                <div className='review-cards'>\n                    <UserRenderReviews reviews={userInfo.reviews} />\n                </div>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Profile\n","// Component for routing. Renders components based on given path.\n\n\nimport React from 'react'\nimport App from './App.js'\nimport CoursePage from './CoursePage.js'\nimport AddCourse from './AddCourse.js'\nimport Login from './Login.js'\nimport Signup from './Signup.js'\nimport Profile from './Profile.js'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from 'react-router-dom'\n\nlet MainRouter = () => {\n\n    return (\n        <div className='Router'>\n            <Router>\n                <Switch>\n                    <Route exact path='/cs97-project/' component={ App } />\n                    <Route exact path='/cs97-project/course/:id' component={ CoursePage } />\n                    <Route exact path='/cs97-project/addcourse' component={ AddCourse } />\n                    <Route exact path='/cs97-project/login' component={ Login } ignoreScrollPosition />\n                    <Route exact path='/cs97-project/signup' component={ Signup } />\n                    <Route exact path='/cs97-project/profile/:id' component={ Profile } />\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n\nexport default MainRouter\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport Router from './components/Router.js';\nimport reportWebVitals from './helper/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}